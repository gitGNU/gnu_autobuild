\input texinfo   @c -*-texinfo-*-
@comment $Id: autobuild.texi,v 1.16 2004-07-09 13:03:39 jas Exp $
@comment %**start of header
@setfilename autobuild.info
@include version.texi
@settitle Autobuild @value{VERSION}
@syncodeindex pg cp
@comment %**end of header
@copying
This manual is last updated @value{UPDATED} for version
@value{VERSION} of Autobuild.

Copyright @copyright{} 2004 Simon Josefsson.

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover Texts being ``A GNU Manual,''
and with the Back-Cover Texts as in (a) below.  A copy of the
license is included in the section entitled ``GNU Free Documentation
License.''

(a) The FSF's Back-Cover Text is: ``You have freedom to copy and modify
this GNU Manual, like GNU software.  Copies published by the Free
Software Foundation raise funds for GNU development.''
@end quotation
@end copying

@dircategory Development
@direntry
* autobuild: (autobuild).	Generate HTML information from software builds.
@end direntry

@dircategory GNU utilities
@direntry
* autobuild: (autobuild)Invoking autobuild.	Process build logs.
* htmlize: (autobuild)Invoking htmlize.		Add markup to text files.
@end direntry

@titlepage
@title Autobuild
@subtitle for version @value{VERSION}, @value{UPDATED}
@author Simon Josefsson (@email{bug-autobuild@@josefsson.org})
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@ifnottex
@node Top
@top Autobuild

@insertcopying
@end ifnottex

@menu
* Introduction::
* Tutorial::
* Integrating autobuild.m4 in your project::
* Invoking autobuild::
* Invoking htmlize::
* Copying This Manual::
* Index::
@end menu

@node Introduction
@chapter Introduction

Autobuild is a package that process output from building software,
primarily focused on packages using Autoconf and Automake, and then
generate a HTML summary file, containing links to each build log.  The
output include project name, version, build host types (cross compile
aware), compiler host name, date of build, and indication of success
or failure.  The output is indexed in many ways to simplify browsing.

The quickest way to get an understanding of what Autobuild can do for
you, is to look at some example output.  For now, we recommend looking
at how Autobuild is used in the GNU Libidn project, see
@url{http://josefsson.org/autobuild-logs/libidn.html}.

@node Tutorial
@chapter Tutorial

The first step is to collect build logs of your package.  Autobuild
does not help you do this.  A very simple way to do this is as
follows:

@example
jas@@latte:~/src/libidn-0.5.0$ ./configure > ~/libidn.txt
jas@@latte:~/src/libidn-0.5.0$ make check >> ~/libidn.txt
@end example

Now let Autobuild parse the file.

@example
jas@@latte:~/src/libidn-0.5.0$ cd
jas@@latte:~$ autobuild --dry-run --verbose libidn.txt
`libidn.txt':
 Project: libidn
 Revision: 0.5.0
 Mode: default
 Hosttype: i686-pc-linux-gnu
 Buildtype: i686-pc-linux-gnu
 Hostname: unknown
 Timestamp: unknown
 Status: ok
jas@@latte:~$
@end example

Everything went fine, except possibly that the hostname and timestamp
have default looking values.  If Autobuild is not able to guess more
important values, such as the project name, you may have to use a
command line parameter, e.g. @code{--project}.  You could also
consider improving the guessing logic.

Now, one build log isn't much if you want to make an overview.  Let's
create another build log. @footnote{The script @file{td} is not part
of Autobuild.  It is responsible for logging on a remote machine and
building a package -- it may be cleaned up and discussed here in the
future.}

@example
jas@@latte:~/src/libidn-0.5.1$ td > ~/libidn2.txt
@end example

If you have Emacs and htmlize.el installed, you can markup this log
file up using the @code{htmlize} tool.

@example
jas@@latte:~$ htmlize libidn2.txt libidn2.html
jas@@latte:~$
@end example

Ok, now we have two build logs, and one of them has even been
converted into HTML format.  Let's generate a summary for them.
Notice that here Autobuild is actually parsing a HTML page, which can
be less reliable than parsing a text file.

@example
jas@@latte:~$ autobuild --verbose libidn.txt libidn2.html  > example.html
`libidn.txt':
 Project: libidn
 Revision: 0.5.0
 Mode: default
 Hosttype: i686-pc-linux-gnu
 Buildtype: i686-pc-linux-gnu
 Hostname: unknown
 Timestamp: unknown
 Status: ok
`libidn2.html':
 Project: libidn
 Revision: 0.5.1
 Mode: default
 Hosttype: i386-unknown-netbsdelf1.6
 Buildtype: i386-unknown-netbsdelf1.6
 Hostname: 192.233.54.143
 Timestamp: unknown
 Status: ok
jas@@latte:~$
@end example

See the @file{examples/} sub-directory in the Autobuild source code
distribution, it contain the @file{libidn.txt} and @file{libidn2.txt}
files, and a Makefile that will execute the above commands.  In that
directory, you can remove the distributed @file{example.html} and type
@kbd{make example.html} to regenerate it.

@node Integrating autobuild.m4 in your project
@chapter Integrating autobuild.m4 in your project

A normal build log from an Autoconf/Automake based project do normally
not include the project name, revision, time stamp of build or host
name of the build host.  Specifying these values using
@code{--project} etc (@pxref{Invoking autobuild}) can be tedious,
especially considering that it would be so simple for the Autoconf
@file{configure} script to print them.

To solve the above problem, Autobuild include a @acronym{M4} macro
suitable for use in your Autoconf project, invoked from
@file{configure.ac}.  Properly installed, the macro will make your
project print something similar to the following output (this example
is what the Autobuild itself print during its build), as part of its
build.  This format is later recognized by Autobuild.

@example
...
checking build system type... i686-pc-linux-gnu
checking host system type... i686-pc-linux-gnu
configure: autobuild project... autobuild
configure: autobuild revision... 1.2
configure: autobuild hostname... latte
configure: autobuild timestamp... 20040708-163123
...
@end example

To use the macro, put something like the following in your
@file{configure.ac}:

@example
AB_INIT
@end example

Then make sure your Autoconf installation can find the
@file{autobuild.m4} which should have been installed when you
installed Autobuild.

The macro can take an optional parameter, the build mode, as follows:

@example
AB_INIT(whatever)
@end example

This would result in an additional message:

@example
...
configure: autobuild mode... whatever
...
@end example

@node Invoking autobuild
@chapter Invoking autobuild

@pindex autobuild
@cindex invoking @command{autobuild}

@section Synopsis

@example
autobuild [OPTION]... FILE...
@end example

@section Description

Read and parse build logs to find project name, revision, build mode,
build host type, build type (for cross compile builds), hostname, and
timestamp, then print a HTML page with information and links to the
logs.

@xref{Tutorial}, for more discussion.

Mandatory arguments to long options are mandatory for short options
too.

@verbatim
    --abort
           Abort  if any of the following values cannot be guessed: project
           name, revision, host type, and build type.

    -n, --dry-run
           Just parse, don’t print output.

    -v, --verbose
           Explain what is being done.

For use when autobuild fail to guess the values properly:
    -p, --project=STRING
           Specify project name.

    --revision=STRING
           Specify project revision.

    --mode=STRING
           Specify build mode (typically ’default’).

    --hosttype=STRING
           Specify host type (e.g., i686‐pc‐linux‐gnu).

    --buildtype=STRING
           Specify build type  (e.g.,  m68k‐uclinux‐elf).   Different  from
           hosttype for cross compiles.

    --hostname=STRING
           Specify name of host log was created on.

    --timestamp=STRING
           Specify  when  build  was  made.  Any date format will work, but
           `YYYY-MM-DD+HH.MM.SS' is recommended.

    --status=STRING
           Outcome of build.  Any string will work, but "ok" and "fail" are
           recommended for the two basic outcomes.

    Other options:

    --help Display this help and exit.

    --version
           Output version information and exit.
@end verbatim

@node Invoking htmlize
@chapter Invoking htmlize

@pindex htmlize
@cindex invoking @command{htmlize}

@section synopsis
Add markup to file and save as HTML.

@example
htmlize [OPTION]... INFILE [OUTFILE [EMACS-MODE]]
@end example

@section Description

Launch GNU Emacs, loading INFILE into a buffer, then changing to
EMACS-MODE (by default, @code{compilation-mode}), then invoke
@code{htmlize.el} on the buffer, saving the output into OUTFILE.

Note that @file{htmlize.el} is not part of GNU Emacs, so you must
install it separately.  A copy is included in Autobuild.

@verbatim
Options:
  --help      display this help and exit successfully.
  --version   display version information and exit successfully.
@end verbatim

@node Copying This Manual
@appendix Copying This Manual

@menu
* GNU Free Documentation License::  License for copying this manual.
@end menu

@include fdl.texi


@node Index
@unnumbered Index

@printindex cp

@bye
