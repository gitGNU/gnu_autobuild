\input texinfo   @c -*-texinfo-*-
@comment $Id: autobuild.texi,v 1.23 2005-09-13 15:19:02 jas Exp $
@comment %**start of header
@setfilename autobuild.info
@include version.texi
@settitle Autobuild @value{VERSION}
@syncodeindex pg cp
@comment %**end of header
@copying
This manual is last updated @value{UPDATED} for version
@value{VERSION} of Autobuild.

Copyright @copyright{} 2004 Simon Josefsson.

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover Texts being ``A GNU Manual,''
and with the Back-Cover Texts as in (a) below.  A copy of the
license is included in the section entitled ``GNU Free Documentation
License.''

(a) The FSF's Back-Cover Text is: ``You have freedom to copy and modify
this GNU Manual, like GNU software.  Copies published by the Free
Software Foundation raise funds for GNU development.''
@end quotation
@end copying

@dircategory Development
@direntry
* autobuild: (autobuild).	Generate HTML information from software builds.
@end direntry

@dircategory GNU utilities
@direntry
* autobuild: (autobuild)Invoking autobuild.	Process build logs.
* htmlize: (autobuild)Invoking htmlize.		Add markup to text files.
@end direntry

@titlepage
@title Autobuild
@subtitle Automate building software and generate build status summary
@subtitle for version @value{VERSION}, @value{UPDATED}
@author Simon Josefsson
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@ifnottex
@node Top
@top Autobuild

@insertcopying
@end ifnottex

@menu
* Introduction::
* Tutorial::
* Integrating autobuild.m4 In Your Project::
* Build Robot::
* Scripting The Build Robot::
* Invoking autobuild::
* Invoking htmlize::
* Copying This Manual::
* Index::
@end menu

@node Introduction
@chapter Introduction

Autobuild is a package that process output from building software,
primarily focused on packages using Autoconf and Automake, and then
generate an @acronym{HTML} summary file, containing links to each
build log.  The output include project name, version, build host types
(cross compile aware), compiler host name, date of build, and
indication of success or failure.  The output is indexed in many ways
to simplify browsing.

Autobuild can also help you automate building your project on many
systems concurrently.  Users with accounts on the SourceForge compile
farms will be able to invoke a parallel build of their software, and
produce a summary of the build status, after reading this manual.

The quickest way to get an understanding of what Autobuild can do for
you, is to look at some example output.  For now, we recommend looking
at how Autobuild is used in the GNU Libidn project, see
@url{http://josefsson.org/autobuild-logs/libidn.html}.

@node Tutorial
@chapter Tutorial

The first step is to collect build logs of your package.  Autobuild
can help you do this, but you can also do it easily yourself, as
follows.

@example
jas@@latte:~/src/libidn-0.5.0$ ./configure > ~/libidn.txt
jas@@latte:~/src/libidn-0.5.0$ make check >> ~/libidn.txt
@end example

Now let Autobuild parse the file.

@example
jas@@latte:~/src/libidn-0.5.0$ cd
jas@@latte:~$ autobuild --dry-run --verbose libidn.txt
`libidn.txt':
 Project: libidn
 Revision: 0.5.0
 Mode: default
 Hosttype: i686-pc-linux-gnu
 Buildtype: i686-pc-linux-gnu
 Hostname: unknown
 Timestamp: unknown
 Status: ok
jas@@latte:~$
@end example

Everything went fine, except possibly that the hostname and timestamp
have default looking values.  If Autobuild is not able to guess more
important values, such as the project name, you may have to use a
command line parameter, e.g. @code{--project}.  You could also
consider improving the guessing logic.

Now, one build log isn't much if you want to make an overview.  Let's
create another build log. @footnote{The script @file{td} is not part
of Autobuild.  It is responsible for logging on a remote machine and
building a package -- it may be cleaned up and discussed here in the
future.}

@example
jas@@latte:~/src/libidn-0.5.1$ td > ~/libidn2.txt
@end example

If you have Emacs and htmlize.el installed, you can markup this log
file up using the @code{htmlize} tool.

@example
jas@@latte:~$ htmlize libidn2.txt libidn2.html
jas@@latte:~$
@end example

Ok, now we have two build logs, and one of them has even been
converted into @acronym{HTML} format.  Let's generate a summary for
them.  Notice that here Autobuild is actually parsing an
@acronym{HTML} page, which can be less reliable than parsing a text
file.

@example
jas@@latte:~$ autobuild --verbose libidn.txt libidn2.html  > example.html
`libidn.txt':
 Project: libidn
 Revision: 0.5.0
 Mode: default
 Hosttype: i686-pc-linux-gnu
 Buildtype: i686-pc-linux-gnu
 Hostname: unknown
 Timestamp: unknown
 Status: ok
`libidn2.html':
 Project: libidn
 Revision: 0.5.1
 Mode: default
 Hosttype: i386-unknown-netbsdelf1.6
 Buildtype: i386-unknown-netbsdelf1.6
 Hostname: 192.233.54.143
 Timestamp: unknown
 Status: ok
jas@@latte:~$
@end example

See the @file{examples/} sub-directory in the Autobuild source code
distribution, it contain the @file{libidn.txt} and @file{libidn2.txt}
files, and a Makefile that will execute the above commands.  In that
directory, you can remove the distributed @file{example.html} and type
@kbd{make example.html} to regenerate it.

@node Integrating autobuild.m4 In Your Project
@chapter Integrating @file{autobuild.m4} In Your Project

A normal build log from an Autoconf/Automake based project do normally
not include the project name, revision, time stamp of build or host
name of the build host.  Specifying these values using
@code{--project} etc (@pxref{Invoking autobuild}) can be tedious,
especially considering that it would be so simple for the Autoconf
@file{configure} script to print them.

To solve the above problem, Autobuild includes an @acronym{M4} macro
suitable for use in your Autoconf project, invoked from
@file{configure.ac}.  Properly installed, the macro will make your
project print something similar to the following output (this example
is what the Autobuild itself prints during its build), as part of its
build.  This format is later recognized by Autobuild.

@example
...
checking build system type... i686-pc-linux-gnu
checking host system type... i686-pc-linux-gnu
configure: autobuild project... autobuild
configure: autobuild revision... 1.2
configure: autobuild hostname... latte
configure: autobuild timestamp... 20040708-163123
...
@end example

To use the macro, put something like the following in your
@file{configure.ac}:

@example
AB_INIT
@end example

Then make sure your Autoconf installation can find the
@file{autobuild.m4} file, which should have been installed when you
installed Autobuild.

The macro can take an optional parameter, the build mode, as follows:

@example
AB_INIT(whatever)
@end example

This would result in an additional message:

@example
...
configure: autobuild mode... whatever
...
@end example

@node Build Robot
@chapter Build Robot

Collecting build logs manually, especially when more platforms are
involved, is tedious.  Autobuild can help you with this.

The details of how to send the source code to all build systems, and
how to invoke the actual software build on all systems, depend on your
environment.  To help separate these details, Autobuild have two
commands, @command{abput} and @command{abbuild}, that act as generic
front ends.  The @command{abput} tool is responsible for uploading
your source code to the build systems.  The @command{abbuild} tool is
responsible for logging on to each system and build the software.  The
reason these two steps are separated is that the @command{abput} step
can be time consuming, and it is typically invoked less frequently
than the @command{abbuild} step.  Here's a typical scenario:

@example
$ abput --system sourceforge yourproject-4.2.tar.gz
...
$ abbuild sourceforge yourproject-4.2.tar.gz alpha-linux1
...
@end example

The @command{abput} tool is invoked by specifying the @code{--system}
parameter naming each back end, and the file name to upload.  The file
name is typically the output from Automake @command{make dist}, i.e.,
@file{yourproject-4.2.tar.gz}.  The tool will then invoke a back end,
@command{abput-@var{system}}, with the file name as parameter, for
each of the provided systems.  The back end could use @acronym{FTP},
Secure Shell @acronym{SCP}, @command{cp} to NFS-mounted file systems,
etc.  As you can imagine, the @command{abput} tool is a simple shell
script, but you can make @command{abput-@var{system}} however complex
you need.

Likewise, the @command{abbuild} tool is a simple front end for the
back end scripts, @command{abbuild-@var{system}}, that are responsible
for building your project on the host given as a parameter.  It will
typically use @command{telnet} or Secure Shell (@acronym{ssh}) to log
on to a system, and then unpack the source code and invoke
@command{./configure && make check} or similar.

The intention is that you will implement the details of uploading the
software package to your various build systems in a script
@command{abput-@var{somename}}, and the details of building the
project on those systems in a script @command{abbuild-@var{somename}}.

@section SourceForge Compile Farm Back End

Autobuild ships with one set of example scripts,
@command{abput-sourceforge} and @command{abbuild-sourceforge}, which
are written to upload files and build projects on the SourceForge
Compile Farms (see @url{http://www.sf.net/} for more information).  As
SourceForge utilize @acronym{ssh} with public key authentication,
there is little configuration needed.  In fact, the only thing you
will need to tell the Autobuild SourceForge back end is your
SourceForge user name, in case it is different from your login user
name.

If you have an account @code{joe42} on the SourceForge compile farms,
here is how you would use Autobuild to build your hypothetical package
@code{yourproject}.

@example
~/src/yourproject$ make dist
...
~/src/yourproject$ abput -s sourceforge \
                   yourproject-4.2.tar.gz
yourproject-4.2.tar.gz     100% 2556KB  79.9KB/s   00:32
~/src/yourproject$ ABSFUSER=joe42 abbuild \
                   yourproject-4.2.tar.gz \
                   sourceforge x86-linux2
checking build system type... i686-pc-linux-gnu
checking host system type... i686-pc-linux-gnu
checking target system type... i686-pc-linux-gnu
checking for a BSD-compatible install... /usr/bin/install -c
checking whether build environment is sane... yes
checking for gawk... gawk
checking whether make sets $(MAKE)... yes
configure: autobuild project... yourproject
configure: autobuild revision... 4.2
configure: autobuild hostname... x86-linux2.cf.sourceforge.net
configure: autobuild timestamp... 20040826-115252
...
PASS: simple
PASS: anonself
==================
All 2 tests passed
==================
...
~/src/yourproject$
@end example

Supplying the @code{ABSFUSER} environment variable can be removed, if
you set it in the shell script file @file{~/.ab-sf} which is sourced
by @command{abbuild-sourceforge}.

@example
$ echo ABSFUSER=joe42 > ~/.ab-sf
@end example

@node Scripting The Build Robot
@chapter Scripting The Build Robot

The tools @command{abput} and @command{abbuild} helped you build your
project, but you would still need to invoke those commands for each
host in all your systems.  The natural next step is to write a script
to do this for you.  One isn't included with Autobuild, but the
following is what the author uses.  Let it serve as inspiration.

@example
#!/bin/bash
BASE=~/src/logs
HOSTS="alpha-linux1 amd64-linux1 ppc-osx2 \
       shell sparc-solaris1 sparc-solaris2 \
       x86-linux2 x86-openbsd1 x86-solaris1"
FILE=$1

test x$FILE == x && echo "Usage: $0 FILE" && exit 1

for HOST in $HOSTS; do
  OUT=$BASE/$FILE-$HOST-output

  if test -f $OUT; then
    echo Working $host... remove $OUT to start again
  else
    abbuild $FILE sourceforge $HOST > $OUT 2>&1 &
  fi
done
@end example

As you can see, it will launch many @command{abbuild} processes in
parallel, one for each host on the SourceForge system.  All output are
redirected into files named after the project name, version and host,
below the directory @file{~/src/logs}.  Incidentally, that directory
contain a @acronym{CVS} repository of such files, which is checked out
on a web server, to make the build logs accessible for interested
parties.

Once the build processes has been started, you can get an overview of
the process by invoking @command{autobuild} and viewing the output in
an @acronym{HTML} browser.

@example
~/src/logs$ autobuild yourproject-*-output > yourproject.html
@end example

The final touch can be given by converting the build logs to
@acronym{HTML}, and then let the index page link to them.  The
@acronym{HTML}ized build logs are easier to read.

@example
~/src/logs$ for i in yourproject-*-output; do \
            htmlize -u $i; done
~/src/logs$ autobuild yourproject-*-output.html > yourproject.html
@end example

That's all folks!

@node Invoking autobuild
@chapter Invoking autobuild

@pindex autobuild
@cindex invoking @command{autobuild}

@section Synopsis

@example
autobuild [@var{OPTION}]... @var{FILE}...
@end example

@section Description

Read and parse build logs to find project name, revision, build mode,
build host type, build type (for cross compile builds), hostname, and
timestamp, then print an @acronym{HTML} page with information and
links to the logs.

@xref{Tutorial}, for more discussion.

Mandatory arguments to long options are mandatory for short options
too.

@verbatim
    --abort
           Abort  if any of the following values cannot be guessed: project
           name, revision, host type, and build type.

    -n, --dry-run
           Just parse, don’t print output.

    -s, --skip-unknown
           Skip unparsable files.

    -v, --verbose
           Explain what is being done.

For use when autobuild fail to guess the values properly:
    -p, --project=STRING
           Specify project name.

    --revision=STRING
           Specify project revision.

    --mode=STRING
           Specify build mode (typically ’default’).

    --hosttype=STRING
           Specify host type (e.g., i686‐pc‐linux‐gnu).

    --buildtype=STRING
           Specify build type  (e.g.,  m68k‐uclinux‐elf).   Different  from
           hosttype for cross compiles.

    --hostname=STRING
           Specify name of host log was created on.

    --timestamp=STRING
           Specify  when  build  was  made.  Any date format will work, but
           `YYYY-MM-DD+HH.MM.SS' is recommended.

    --status=STRING
           Outcome of build.  Any string will work, but "ok" and "fail" are
           recommended for the two basic outcomes.

    Other options:

    --help Display this help and exit.

    --version
           Output version information and exit.
@end verbatim

@node Invoking htmlize
@chapter Invoking htmlize

@pindex htmlize
@cindex invoking @command{htmlize}

@section Synopsis
Add markup to file and save as @acronym{HTML}.

@example
htmlize [@var{OPTION}]... @var{INFILE} [@var{OUTFILE} [@var{EMACS-MODE}]]
@end example

@section Description

Launch Emacs and load @var{INFILE} into a buffer, then invoke a major
mode for font locking, and render the fontified buffer as
@acronym{HTML}, saving the result into @var{OUTFILE}.

Emacs must have @file{htmlfontify.el} installed in its @code{load-path}.

If @var{OUTFILE} is not specified, it will use @var{INFILE} appended
with .html.

If @var{EMACS-MODE} is not specified, @code{compilation-mode} will be
used.

@verbatim
Options:
  --emacs COMMAND
         Use specified command to invoke emacs, e.g. "emacs21".

  --mode MODE
         Fontify  file  using specified Emacs mode, defaults to
         "compilation-mode".  E.g., "sh-mode".

  -f, --force
         Overwrite OUTFILE if it exists, instead  of  exiting  unsuccess-
         fully with an error message.

  -u, --update
         Only  write  to  OUTFILE  when  OUTFILE  does not exist, or when
         INFILE is more recent than OUTFILE.

  -h, --help
         Display this help and exit successfully.

  --version
         Display version information and exit successfully.

Environment variables:
  EMACS  The Emacs editor command.

Simple example:
  htmlize mybuildlog.txt mybuildlog.html
@end verbatim

@node Copying This Manual
@appendix Copying This Manual

@menu
* GNU Free Documentation License::  License for copying this manual.
@end menu

@include fdl.texi


@node Index
@unnumbered Index

@printindex cp

@bye
