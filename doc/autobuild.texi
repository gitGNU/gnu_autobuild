\input texinfo   @c -*-texinfo-*-
@comment $Id: autobuild.texi,v 1.10 2004-07-09 00:16:31 jas Exp $
@comment %**start of header
@setfilename autobuild.info
@include version.texi
@settitle Autobuild @value{VERSION}
@syncodeindex pg cp
@comment %**end of header
@copying
This manual is last updated @value{UPDATED} for version
@value{VERSION} of Autobuild.

Copyright @copyright{} 2004 Simon Josefsson.

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover Texts being ``A GNU Manual,''
and with the Back-Cover Texts as in (a) below.  A copy of the
license is included in the section entitled ``GNU Free Documentation
License.''

(a) The FSF's Back-Cover Text is: ``You have freedom to copy and modify
this GNU Manual, like GNU software.  Copies published by the Free
Software Foundation raise funds for GNU development.''
@end quotation
@end copying

@dircategory Development
@direntry
* autobuild: (autobuild).	Generate HTML information from software builds.
@end direntry

@dircategory GNU utilities
@direntry
* autobuild: (autobuild)Invoking autobuild.	Process build logs.
* htmlize: (autobuild)Invoking htmlize.		Add markup to text files.
@end direntry

@titlepage
@title Autobuild
@subtitle for version @value{VERSION}, @value{UPDATED}
@author Simon Josefsson (@email{bug-autobuild@@josefsson.org})
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@ifnottex
@node Top
@top Autobuild

@insertcopying
@end ifnottex

@menu
* Introduction::
* Tutorial::
* Integrating autobuild.m4 in your project::
* Invoking autobuild::
* Invoking htmlize::
* Copying This Manual::
* Index::
@end menu

@node Introduction
@chapter Introduction

Autobuild is a package that process output from building software,
primarily focused on packages using Autoconf and Automake, and then
generate a HTML summary file, containing links to each build log.  The
output include project name, version, build host types (cross compile
aware), compiler host name, date of build, and indication of success
or failure.  The output is indexed in many ways to simplify browsing.

The quickest way to get an understanding of what Autobuild can do for
you, is to look at some example output.  For now, we recommend looking
at how Autobuild is used in the GNU Libidn project, see
@url{http://josefsson.org/autobuild-logs/libidn.html}.

@node Tutorial
@chapter Tutorial

The first step is to collect build logs of your package.  Autobuild
does not help you do this.  A very simple way to do this is as
follows:

@example
jas@@latte:~/src/libidn-0.5.0$ ./configure > ~/foo
jas@@latte:~/src/libidn-0.5.0$ make check >> ~/foo
@end example

We'll continue directly and invoke autobuild on the log file.

@example
jas@@latte:~/src/libidn-0.5.0$ cd
jas@@latte:~$ autobuild -v foo
Project: libidn
Revision: 0.5.0
Mode: default
Hosttype: i686-pc-linux-gnu
Buildtype: i686-pc-linux-gnu
Hostname: unknown
Timestamp: unknown
Status: ok
./autobuild,project=libidn,revision=0.5.0,mode=default,hosttype=i686-pc-linux-gnu,buildtype=i686-pc-linux-gnu,hostname=unknown,timestamp=unknown,status=ok,log.txt
jas@@latte:~$ ls -la foo autobuild\,project\=libidn\,revision\=0.5.0\,mode\=default\,hosttype\=i686-pc-linux-gnu\,buildtype\=i686-pc-linux-gnu\,hostname\=unknown\,timestamp\=unknown\,status\=ok\,log.txt
-rw-r--r--    1 jas      jas         24821 2004-07-07 02:27 autobuild,project=libidn,revision=0.5.0,mode=default,hosttype=i686-pc-linux-gnu,buildtype=i686-pc-linux-gnu,hostname=unknown,timestamp=unknown,status=ok,log.txt
-rwxr-xr-x    1 jas      jas         24821 2004-07-07 02:27 foo
jas@@latte:~$
@end example

The @file{foo} file is identical to the @file{autobuild,*,log.txt}
except for the name.  The special form of the file name is used by
@code{abindex} to create nice looking indicies for your log files.

If you have Emacs and htmlize.el installed, you can also get nice HTML
outputs of the build logs, as follows:

@example
jas@@latte:~$ autobuild --html -v foo
Project: libidn
Revision: 0.5.0
Mode: default
Hosttype: i686-pc-linux-gnu
Buildtype: i686-pc-linux-gnu
Hostname: unknown
Timestamp: unknown
Status: ok
./autobuild,project=libidn,revision=0.5.0,mode=default,hosttype=i686-pc-linux-gnu,buildtype=i686-pc-linux-gnu,hostname=unknown,timestamp=unknown,status=ok,log.html
jas@@latte:~$
@end example

You may have noticed that some fields have default looking values.
This is because autobuild could not guess them using the log file you
provided.  Either you can improve the guessing logic, or simpler,
specify the values on the command line.

@example
jas@@latte:~$ autobuild --html -v foo --hostname latte --timestamp=20040607-0220
Project: libidn
Revision: 0.5.0
Mode: default
Hosttype: i686-pc-linux-gnu
Buildtype: i686-pc-linux-gnu
Hostname: latte
Timestamp: 20040607-0220
Status: ok
./autobuild,project=libidn,revision=0.5.0,mode=default,hosttype=i686-pc-linux-gnu,buildtype=i686-pc-linux-gnu,hostname=latte,timestamp=20040607-0220,status=ok,log.html
jas@@latte:~$
@end example

Much better.  Let's look at the HTML output for our example.  First,
invoke @code{abindex} to get the files.

@example
jas@@latte:~$ abindex autobuild,*,log.* > example.html
jas@@latte:~$
@end example

Recall that since we supplied some values, and regenerated the output,
we have three different files matching the file name glob, but all
three are based on the same build, so it will not be very exciting.

See the @file{examples/} sub-directory in the Autobuild source code
distribution, it execute the above commands.  In that directory, you
can remove the distributed @file{example.html} and type @kbd{make
example.html} to regenerate it.

@node Integrating autobuild.m4 in your project
@chapter Integrating autobuild.m4 in your project

A normal build log from an Autoconf/Automake based project do normally
not include the project name, revision, time stamp of build or host
name of the build host.  Specifying these values using
@code{--project} etc (@pxref{Invoking autobuild}) can be tedious,
especially considering that it would be so simple for the Autoconf
@file{configure} script to print them.

To solve the above problem, Autobuild include a @acronym{M4} macro
suitable for use in your Autoconf project, invoked from
@file{configure.ac}.  Properly installed, the macro will make your
project print something similar to the following output (this example
is what the Autobuild itself print during its build), as part of its
build.  This format is later recognized by Autobuild.

@example
...
checking build system type... i686-pc-linux-gnu
checking host system type... i686-pc-linux-gnu
configure: autobuild project... autobuild
configure: autobuild revision... 1.2
configure: autobuild hostname... latte
configure: autobuild timestamp... 20040708-163123
...
@end example

To use the macro, put something like the following in your
@file{configure.ac}:

@example
AB_INIT
@end example

Then make sure your Autoconf installation can find the
@file{autobuild.m4} which should have been installed when you
installed Autobuild.

The macro can take an optional parameter, the build mode, as follows:

@example
AB_INIT(whatever)
@end example

This would result in an additional message:

@example
...
configure: autobuild mode... whatever
...
@end example

@node Invoking autobuild
@chapter Invoking autobuild

@pindex autobuild
@cindex invoking @command{autobuild}

@section Synopsis

Read and parse build logs.

@xref{Tutorial}, for more discussion.

@example
autobuild [OPTION]... [FILE]...
@end example

@section Description

Read and parse build logs to find project name, revision, build mode,
build host type, build type (for cross compile builds), hostname, and
timestamp, then produce a file (named depending on the extracted param‐
eters) with the build log.

Mandatory arguments to long options are mandatory for short options
too.

@verbatim
       --abort
              Abort  if  guessing  values  fail.  With the exceptions of build
              mode (falls back to ’default’) and the  status  (falls  back  to
              ’fail’).

       -n, --dry-run
              Just parse, don’t write file.

       --html Create  HTML output instead of text.  Need Emacs and htmlize.el.

       -o, --outdir=DIR
              Create files in specified directory.

   For use when autobuild fail to guess the values properly:
       -p, --project=STRING
              Specify project name.

       --revision=STRING
              Specify project revision.

       --mode=STRING
              Specify build mode (typically ’default’).

       --hosttype=STRING
              Specify host type (e.g., i686‐pc‐linux‐gnu).

       --buildtype=STRING
              Specify build type  (e.g.,  m68k‐uclinux‐elf).   Different  from
              hosttype for cross compiles.

       --hostname=STRING
              Specify name of host log was created on.

       --timestamp=STRING
              Specify  when  build  was  made.  Any date format will work, but
              ’YYYY‐MM‐DDTHH:MM:SS’ is recommended.

       --status=STRING
              Outcome of build.  Any string will work, but "ok" and "fail" are
              recommended for the two basic outcomes.

       Other options:

       -v, --verbose
              Explain what is being done.

       --help Display this help and exit.

       --version
              Output version information and exit.
@end verbatim

@node Invoking htmlize
@chapter Invoking htmlize

@pindex htmlize
@cindex invoking @command{htmlize}

@section synopsis
Add markup to file and save as HTML.

@example
htmlize INFILE [OUTFILE [EMACS-MODE]]
@end example

@section Description

Starts emacs, load the INFILE file into a buffer, change to EMACS-MODE
(by default, compilation-mode), then invoke @code{htmlize.el}, saving
the output into OUTFILE.

@node Copying This Manual
@appendix Copying This Manual

@menu
* GNU Free Documentation License::  License for copying this manual.
@end menu

@include fdl.texi


@node Index
@unnumbered Index

@printindex cp

@bye
